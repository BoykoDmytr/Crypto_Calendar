import { useEffect, useState } from 'react'
import { supabase } from '../lib/supabase'
import dayjs from 'dayjs'
import EventForm from '../components/EventForm'

function RowActions({ children }){ return <div className="mt-3 grid grid-cols-1 sm:grid-cols-3 gap-2">{children}</div> }

export default function Admin(){
  const [pass, setPass] = useState('')
  const [ok, setOk] = useState(false)
  const [pending, setPending] = useState([])
  const [approved, setApproved] = useState([])
  const [editId, setEditId] = useState(null)      // id, —â–æ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è
  const [editTable, setEditTable] = useState(null) // 'events_pending' | 'events_approved'

  useEffect(()=>{ if(!ok) return; refresh() },[ok])

  const refresh = async ()=>{
    const [p,a] = await Promise.all([
      supabase.from('events_pending').select('*').order('created_at', { ascending: true }),
      supabase.from('events_approved').select('*').order('start_at', { ascending: true }),
    ])
    if(!p.error) setPending(p.data||[])
    if(!a.error) setApproved(a.data||[])
  }

  // ‚úÖ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –≤ approved —Ç—ñ–ª—å–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
  const approve = async (ev) => {
  // –ª–∏—à–µ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ø–æ–ª—è –≤ approved
  const allowed = [
    'title','description','start_at','end_at','timezone','type','tge_exchanges','link'
  ];
  const payload = Object.fromEntries(
    Object.entries(ev).filter(([k]) => allowed.includes(k))
  );

  const toMinutes = (s) => {
  const m = /^(\d{1,2}):(\d{2})(?::(\d{2}))?$/.exec(s || "");
  if (!m) return Number.POSITIVE_INFINITY;
  return (+m[1]) * 60 + (+m[2]);
};

  // ‚¨áÔ∏è –ù–û–í–ï: –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –±—ñ—Ä–∂—ñ –∑–∞ —á–∞—Å–æ–º –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é
  const ex = Array.isArray(ev.tge_exchanges) ? [...ev.tge_exchanges] : [];
  ex.sort((a, b) => toMinutes(a?.time) - toMinutes(b?.time));
  payload.tge_exchanges = ex;

  const { error } = await supabase.from('events_approved').insert(payload);
  if (error) return alert('–ü–æ–º–∏–ª–∫–∞: ' + error.message);

  await supabase.from('events_pending').delete().eq('id', ev.id);
  await refresh();
};

  // ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ = –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É
  const reject = async (ev)=>{
    if(!confirm('–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ —ñ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∑–∞—è–≤–∫—É?')) return
    const { error } = await supabase.from('events_pending').delete().eq('id', ev.id)
    if(error) return alert('–ü–æ–º–∏–ª–∫–∞: ' + error.message)
    await refresh()
  }

  const updateRow = async (table, id, payload)=>{
    const { error } = await supabase.from(table).update(payload).eq('id', id)
    if(error) return alert('–ü–æ–º–∏–ª–∫–∞: '+error.message)
    setEditId(null); setEditTable(null)
    await refresh()
  }

  const removeRow = async (table, id)=>{
    if(!confirm('–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å?')) return
    const { error } = await supabase.from(table).delete().eq('id', id)
    if(error) return alert('–ü–æ–º–∏–ª–∫–∞: '+error.message)
    await refresh()
  }

  if(!ok){
    return (
      <div className="max-w-sm mx-auto">
        <h1 className="text-xl font-semibold mb-2">–í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</h1>
        <div className="card p-4">
          <input autoFocus type="password" className="input" placeholder="–ü–∞—Ä–æ–ª—å" value={pass} onChange={e=>setPass(e.target.value)} />
          <button className="btn w-full mt-3" onClick={()=> setOk(pass === import.meta.env.VITE_ADMIN_PASS)}>–£–≤—ñ–π—Ç–∏</button>
          <p className="text-xs text-gray-500 mt-2">–ü–∞—Ä–æ–ª—å –∑–Ω–∞—î –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.</p>
        </div>
      </div>
    )
  }

  const EditingCard = ({table, ev})=> (
    <div className="card p-4">
      <div className="text-sm text-gray-500 mb-2">–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ({table})</div>
      <EventForm
        initial={{ ...ev, start_at: ev.start_at?.slice(0,16), end_at: ev.end_at?.slice(0,16) }}
        onSubmit={(payload)=> updateRow(table, ev.id, payload)}
        loading={false}
      />
      <div className="flex gap-2 mt-3">
        <button className="btn-secondary px-4 py-2 rounded-xl" onClick={()=>{setEditId(null); setEditTable(null)}}>–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
      </div>
    </div>
  )

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-xl font-semibold">–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</h1>
        <button className="btn-secondary px-3 py-2 rounded-xl" onClick={refresh}>–û–Ω–æ–≤–∏—Ç–∏</button>
      </div>

      {/* Pending */}
      <section>
        <h2 className="font-semibold mb-2">–ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó</h2>
        {pending.length===0 && <p className="text-sm text-gray-600">–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫.</p>}
        <div className="space-y-3">
          {pending.map(ev=> (
            <article key={ev.id} className="card p-4">
              {editId===ev.id && editTable==='events_pending' ? (
                <EditingCard table="events_pending" ev={ev} />
              ) : (
                <>
                  <div className="text-xs text-gray-500">{dayjs(ev.created_at).format('DD MMM HH:mm')}</div>
                  <h3 className="font-semibold">{ev.title}</h3>
                  {ev.description && <p className="text-sm text-gray-600 mt-1">{ev.description}</p>}
                  <div className="text-sm mt-2 flex flex-wrap gap-2">
                    <span className="px-2 py-1 rounded-md bg-gray-100">{ev.type}</span>
                    <span>üïí {dayjs(ev.start_at).format('DD MMM YYYY, HH:mm')} {ev.timezone}</span>
                    {ev.link && <a className="underline" href={ev.link} target="_blank">–õ—ñ–Ω–∫</a>}
                  </div>

                  <RowActions>
                    <button className="btn" onClick={()=>approve(ev)}>–°—Ö–≤–∞–ª–∏—Ç–∏</button>
                    <button className="btn-secondary" onClick={()=>reject(ev)}>–í—ñ–¥—Ö–∏–ª–∏—Ç–∏</button>
                    <div className="flex gap-2">
                      <button className="btn-secondary" onClick={()=>{setEditId(ev.id); setEditTable('events_pending')}}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                      <button className="btn-secondary" onClick={()=>removeRow('events_pending', ev.id)}>–í–∏–¥–∞–ª–∏—Ç–∏</button>
                    </div>
                  </RowActions>
                </>
              )}
            </article>
          ))}
        </div>
      </section>

      {/* Approved */}
      <section>
        <h2 className="font-semibold mb-2">–°—Ö–≤–∞–ª–µ–Ω—ñ –ø–æ–¥—ñ—ó</h2>
        {approved.length===0 && <p className="text-sm text-gray-600">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.</p>}
        <div className="space-y-3">
          {approved.map(ev=> (
            <article key={ev.id} className="card p-4">
              {editId===ev.id && editTable==='events_approved' ? (
                <EditingCard table="events_approved" ev={ev} />
              ) : (
                <>
                  <div className="font-semibold">{ev.title}</div>
                  <div className="text-sm text-gray-600">{dayjs(ev.start_at).format('DD MMM YYYY, HH:mm')} {ev.timezone} ‚Ä¢ {ev.type}</div>
                  <RowActions>
                    <button className="btn-secondary" onClick={()=>{setEditId(ev.id); setEditTable('events_approved')}}>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                    <button className="btn-secondary" onClick={()=>removeRow('events_approved', ev.id)}>–í–∏–¥–∞–ª–∏—Ç–∏</button>
                  </RowActions>
                </>
              )}
            </article>
          ))}
        </div>
      </section>
    </div>
  )
}

// src/components/EventCard.jsx
import dayjs from 'dayjs';
import { Link } from 'react-router-dom';
import { timeStringToMinutes } from '../utils/time';
import EventTokenInfo from './EventTokenInfo';

// –¢–∏–ø–∏, –¥–µ —á–∞—Å –ù–ï–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π (—â–æ–± –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ 00:00)
const TIME_OPTIONAL = new Set(['Binance Alpha', 'OKX Alpha', 'Token Sales', 'Claim / Airdrop', 'Unlocks']);

export default function EventCard({ ev }) {
  const isTGE = ev?.type === 'Listing (TGE)';

  // –ë–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ–π: –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ —î (–º–∏ –≤–∂–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å–µ –≤ UTC ISO)
  const start = ev?.start_at ? dayjs(ev.start_at) : null;
  const end   = ev?.end_at   ? dayjs(ev.end_at)   : null;

  // –ë—ñ—Ä–∂—ñ –¥–ª—è TGE
  const tge = Array.isArray(ev?.tge_exchanges) ? [...ev.tge_exchanges] : [];
  tge.sort((a, b) => timeStringToMinutes(a?.time) - timeStringToMinutes(b?.time));

  // ---------- –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–∞—Ç–∏/—á–∞—Å—É (–ë–ï–ó —Ä–æ–∫—É —ñ –ë–ï–ó —Ç–∞–π–º–∑–æ–Ω–∏) ----------
    // ---------- –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å –¥–∞—Ç–∏/—á–∞—Å—É (–ë–ï–ó —Ä–æ–∫—É —ñ –ë–ï–ó —Ç–∞–π–º–∑–æ–Ω–∏) ----------
  let whenLabel = '';

  if (start) {
    if (isTGE) {
      // TGE ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç–∞
      whenLabel = start.format('DD MMM');
    } else {
      // –ß–∏ —î —Ä–µ–∞–ª—å–Ω–∏–π —á–∞—Å —É start/end (–Ω–µ 00:00)
      const hasStartTime = !!start && (start.hour() !== 0 || start.minute() !== 0);
      const hasEndTime   = !!end   && (end.hour()   !== 0 || end.minute()   !== 0);

      if (end && !start.isSame(end, 'day')) {
        // –ë–∞–≥–∞—Ç–æ–¥–µ–Ω–Ω–∞: –ø–æ–∫–∞–∑—É—î–º–æ —á–∞—Å –±—ñ–ª—è –¥–∞—Ç–∏ –ª–∏—à–µ —è–∫—â–æ –≤—ñ–Ω —î
        const left  = start.format(hasStartTime ? 'DD MMM HH:mm' : 'DD MMM');
        const right = end.format(hasEndTime ? 'DD MMM HH:mm' : 'DD MMM');
        whenLabel = `${left} ‚Üí ${right}`;
      } else {
        // –û–¥–∏–Ω –¥–µ–Ω—å: —è–∫—â–æ —á–∞—Å—É –Ω–µ–º–∞—î ‚Äî –ª–∏—à–µ –¥–∞—Ç–∞
        whenLabel = start.format(hasStartTime ? 'DD MMM HH:mm' : 'DD MMM');

        // –Ø–∫—â–æ —î –∫—ñ–Ω–µ—Ü—å —É —Ç–æ–π —Å–∞–º–∏–π –¥–µ–Ω—å —ñ –≤ –Ω—å–æ–≥–æ —î —á–∞—Å ‚Äî –¥–æ–¥–∞—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
        if (end && start.isSame(end, 'day') && hasEndTime) {
          whenLabel += ` ‚Äì ${end.format('HH:mm')}`;
        }
      }
    }
  }


  // –õ—ñ–≤–∞ –¥–∞—Ç–∞ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
  const dayNum   = start ? start.format('DD') : '';
  const weekday3 = start ? start.format('ddd') : '';

  return (
    <article className="card event-card relative overflow-hidden">
      {/* –ö–Ω–æ–ø–∫–∞-–æ–ª—ñ–≤–µ—Ü—å —É –ø—Ä–∞–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç—ñ */}
      <Link
        to={`/suggest/${ev.id}`}
        aria-label="–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∫—É"
        title="–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∫—É"
        className="absolute top-2 right-2 inline-flex items-center justify-center w-9 h-9 rounded-full border border-gray-200 bg-white shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-brand-500"
      >
        <svg
          viewBox="0 0 24 24"
          className="w-4 h-4 text-gray-600"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <path d="M12 20h9" />
          <path d="M16.5 3.5a2.12 2.12 0 1 1 3 3L7 19l-4 1 1-4L16.5 3.5z" />
        </svg>
      </Link>

      <div className="flex gap-3 sm:gap-4">
        {/* –õ—ñ–≤–∞ –¥–∞—Ç–∞ + –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç */}
        <div className="event-date-col relative">
          <div className="event-date-num">{dayNum}</div>
          <div className="weekday-chip">{weekday3}</div>

          {/* –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —Å–º—É–≥–∞-–∞–∫—Ü–µ–Ω—Ç */}
          <div className="event-accent" />
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="flex-1 pr-12">
          <h3 className="event-title">{ev.title}</h3>

          {ev.description && (
            <p className="event-desc mt-1">{ev.description}</p>
          )}

          <div className="mt-2 flex flex-wrap items-center gap-2 text-sm">
            {/* —Ç–∏–ø */}
            <span className={`badge-type ${/* —É —Ç–µ–º–Ω—ñ–π —Ç–µ–º—ñ –∂–æ–≤—Ç–∏–π –±–µ–π–¥–∂ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É */ ''} ${'badge-type--yellow'}`}>
              {ev.type}
            </span>

            {/* –¥–∞—Ç–∞/—á–∞—Å */}
            {whenLabel && (
              <span className="flex items-center gap-1 event-when">
                <span>üïí</span>
                <span>
                  {whenLabel}
                </span>
              </span>
            )}

            {/* –ø–æ—Å–∏–ª–∞–Ω–Ω—è (—è–∫—â–æ —î) */}
            {ev.link && (
              <a
                className="underline"
                href={ev.link}
                target="_blank"
                rel="noreferrer"
              >
                –õ—ñ–Ω–∫
              </a>
            )}
          </div>

          {/* –±–µ–π–¥–∂—ñ –±—ñ—Ä–∂ –¥–ª—è TGE */}
          {tge.length > 0 && (
            <div className="mt-3 flex flex-wrap gap-2">
              {tge.map((x, i) => (
                <span
                  key={`${x?.name || 'ex'}-${i}`}
                  className="exchange-chip"
                >
                  {x?.name}{x?.time ? ` ‚Ä¢ ${x.time}` : ''}
                </span>
              ))}
            </div>
          )}
          {(ev.coin_name || ev.coin_quantity || ev.coin_price_link) && (
            <EventTokenInfo
              coinName={ev.coin_name}
              coinQuantity={ev.coin_quantity}
              priceLink={ev.coin_price_link}
            />
          )}
        </div>
      </div>
    </article>
  );
}
